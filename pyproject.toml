[build-system]
requires = [
    "scikit-build-core>=0.5.0",
    "pybind11>=2.10.0",
    "setuptools>=61.0.0",
    "wheel>=0.36.0",
    "setuptools_scm>=8.0.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "py-eacopy"
dynamic = ["version"]
description = "Python bindings for EACopy, a high-performance file copy tool"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Long Hao", email = "hal.long@outlook.com"},
]
dependencies = [
    "click>=8.0.0",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Filesystems",
]

[project.optional-dependencies]
dev = [
    "nox>=2023.4.22",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
]
docs = [
    "sphinx>=7.0.0",
    "pydata-sphinx-theme>=0.14.1",
    "sphinx-autobuild>=2021.3.14",
    "myst-parser>=2.0.0",
    "sphinx-gallery>=0.13.0",
    "pillow>=9.0.0",
    "myst-sphinx-gallery>=0.3.0",
    "myst-nb>=1.0.0",
    "tomli>=2.0.0",
]
lint = [
    "black<25.1.1",
    "ruff<0.11.11",
    "isort<6.0.2",
    "autoflake>=2.0.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.2",
    "cibuildwheel>=2.16.0",
]

[project.urls]
Homepage = "https://github.com/loonghao/py-eacopy"
Documentation = "https://loonghao.github.io/py-eacopy"
Issues = "https://github.com/loonghao/py-eacopy/issues"
Changelog = "https://github.com/loonghao/py-eacopy/blob/main/CHANGELOG.md"

[project.scripts]
eacopy = "eacopy.cli:main"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "$version"
version_files = [
    "pyproject.toml:version",
    "src/eacopy/__version__.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["eacopy"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
disable_error_code = ["type-arg", "misc", "no-any-return"]

[tool.ruff]
line-length = 120
target-version = "py38"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "D", # pydocstyle
    "UP", # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = ["D203", "D213", "ARG001", "D107", "D105", "D102", "F811", "I001"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["ARG001", "F401", "F811", "D107", "D105", "D102", "E501", "I001"]
"nox_actions/*.py" = ["D100", "D103", "D104", "E402"]
"noxfile.py" = ["D100", "E402", "D401", "D400"]
"examples/*.py" = ["D401", "D415", "RUF013", "E722", "D400"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 120
target-version = ["py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
# Enforce import section headers.
import_heading_future = "Import future modules"
import_heading_stdlib = "Import built-in modules"
import_heading_thirdparty = "Import third-party modules"
import_heading_firstparty = "Import local modules"

profile = "black"
line_length = 120
force_sort_within_sections = true
force_single_line = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["eacopy"]

[tool.nox]
sessions = ["lint", "pytest"]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]
reuse_venv = true

[tool.nox.session.lint]
deps = ["ruff", "mypy", "isort"]
commands = [
    "mypy --install-types --non-interactive",
    "ruff check .",
    "ruff format --check .",
    "isort --check-only .",
    "mypy src/eacopy --strict"
]

[tool.nox.session.lint_fix]
deps = ["ruff", "mypy", "isort"]
commands = [
    "ruff check --fix .",
    "ruff format .",
    "isort ."
]

[tool.nox.session.pytest]
deps = ["pytest", "pytest-cov"]
commands = [
    "pytest tests/ --cov=eacopy --cov-report=xml:coverage.xml --cov-report=term-missing"
]

[tool.scikit-build]
# Basic configuration
wheel.packages = ["src/eacopy"]
wheel.exclude = ["tests/*"]
wheel.expand-macos-universal-tags = false
sdist.include = ["src/eacopy/*", "src/binding/*", "CMakeLists.txt", "LICENSE", "README.md", "extern/EACopy/*"]
sdist.exclude = ["tests/data/*"]
# Enable experimental features
experimental = true

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[tool.setuptools_scm]
# Format: 1.2.3 (without 'v' prefix)
tag_regex = "^(?P<version>[0-9]+\\.[0-9]+\\.[0-9]+)(?P<dev>-[a-zA-Z0-9]+)?$"
local_scheme = "no-local-version"
# Don't use dev0 suffix for non-tagged versions to avoid metadata mismatches
version_scheme = "release-branch-semver"

[tool.scikit-build.cmake]
version = ">=3.15"
build-type = "Release"

[tool.scikit-build.cmake.define]
PYTHON_LIMITED_API = "OFF"
CMAKE_POSITION_INDEPENDENT_CODE = "ON"
# Ensure symbols are properly exported on Windows
CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS = "ON"
# Disable ABI3 mode
SKBUILD_SOABI = "OFF"

[tool.semantic_release]
version_variable = [
    "src/eacopy/__version__.py:__version__",
    "pyproject.toml:version"
]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install scikit-build-core && python -m build"
