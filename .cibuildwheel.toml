[tool.cibuildwheel]
# Skip PyPy and 32-bit builds
skip = ["pp*", "*-win32", "*-manylinux_i686", "*-musllinux*"]

# Build verbosity
build-verbosity = 3

# Test command to run after building
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*-macosx_arm64", "*-macosx_universal2:arm64"]

# Environment variables
environment = { PIP_DISABLE_PIP_VERSION_CHECK = "1" }

# Build requirements
build-frontend = "pip"

# Dependency management
dependency-versions = "pinned"

# Manylinux image selection
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

# macOS configuration
macos-archs = "x86_64 arm64"

[tool.cibuildwheel.linux]
before-all = [
    "yum install -y cmake3 ninja-build",
    "ln -sf /usr/bin/cmake3 /usr/bin/cmake"
]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"
environment = { CFLAGS = "-fPIC", CXXFLAGS = "-fPIC", CMAKE_GENERATOR = "Ninja", CMAKE_BUILD_PARALLEL_LEVEL = "auto", SKBUILD_OPTIMIZE_BUILD = "ON", EACOPY_BUILD_AS_LIBRARY = "ON", EACOPY_INSTALL = "ON" }

[tool.cibuildwheel.macos]
before-all = [
    "brew install cmake ninja"
]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.14", CMAKE_GENERATOR = "Ninja", CMAKE_BUILD_PARALLEL_LEVEL = "auto", SKBUILD_OPTIMIZE_BUILD = "ON", EACOPY_BUILD_AS_LIBRARY = "ON", EACOPY_INSTALL = "ON" }

[tool.cibuildwheel.windows]
before-all = [
    "pip install cmake ninja"
]
repair-wheel-command = ""
environment = { CMAKE_GENERATOR = "Ninja", CMAKE_BUILD_PARALLEL_LEVEL = "auto", CL = "/MP", SKBUILD_OPTIMIZE_BUILD = "ON", EACOPY_BUILD_AS_LIBRARY = "ON", EACOPY_INSTALL = "ON" }

# Common before-build commands for all platforms
before-build = [
    "pip install -U pip setuptools wheel numpy pybind11 scikit-build-core setuptools_scm cmake",
    "python -c \"import os; os.environ['EACOPY_BUILD_AS_LIBRARY'] = 'ON'; os.environ['EACOPY_INSTALL'] = 'ON'\""
]
