name: Rust Build and Test

on:
  push:
    branches: [ main, simplified-build ]
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+*'
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, simplified-build ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases
  pull-requests: write  # For commenting on PRs
  id-token: write   # For PyPI trusted publishing

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Build and test on Linux
  build-linux:
    name: Build on Linux (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest pytest-cov

      - name: Build wheel
        run: |
          maturin build --release --out dist

      - name: Install wheel
        run: |
          python -m pip install dist/*.whl

      - name: Test
        run: |
          python -m pytest tests/test_simplified.py -v

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  # Build and test on Windows
  build-windows:
    name: Build on Windows (${{ matrix.python-version }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest pytest-cov

      - name: Build wheel
        run: |
          maturin build --release --out dist

      - name: Install wheel
        run: |
          python -m pip install dist/*.whl

      - name: Test
        run: |
          python -m pytest tests/test_simplified.py -v

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  # Build and test on macOS
  build-macos:
    name: Build on macOS (${{ matrix.python-version }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest pytest-cov

      - name: Build wheel
        run: |
          maturin build --release --out dist

      - name: Install wheel
        run: |
          python -m pip install dist/*.whl

      - name: Test
        run: |
          python -m pytest tests/test_simplified.py -v

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  # Create GitHub Release and publish to PyPI
  release:
    name: Release
    needs: [build-linux, build-windows, build-macos]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    environment:
      name: release
      url: https://pypi.org/p/py-eacopy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "# py-eacopy $VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Python bindings for EACopy, a high-performance file copy tool." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Update release notes
      - name: Update Release Notes
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: dist/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
